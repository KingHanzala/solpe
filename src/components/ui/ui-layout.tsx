'use client'

import Link from 'next/link'
import { usePathname } from 'next/navigation'
import * as React from 'react'
import { ReactNode, Suspense, useRef } from 'react'
import toast, { Toaster } from 'react-hot-toast'
import dynamic from 'next/dynamic'

import { ClusterChecker, ClusterUiSelect } from '../cluster/cluster-ui'

// Dynamically import wallet components
const WalletComponents = dynamic(
  async () => {
    const { WalletButton } = await import('../solana/solana-provider')
    const { AccountChecker } = await import('../account/account-ui')
    
    return function WalletComponentsWrapper(props: any) {
      const Component = props.component === 'WalletButton' ? WalletButton : AccountChecker;
      return <Component {...props} />;
    };
  },
  { ssr: false }
)

export function UiLayout({ children, links }: { children: ReactNode; links: { label: string; path: string }[] }) {
  const pathname = usePathname()

  return (
    <div className="h-full flex flex-col">
      <div className="navbar bg-base-300 dark:text-neutral-content flex-col md:flex-row space-y-2 md:space-y-0">
        <div className="flex-1">
          <Link className="btn btn-ghost normal-case text-xl" href="/">
            Solpe
          </Link>
          <ul className="menu menu-horizontal px-1 space-x-2">
            {links.map(({ label, path }) => (
              <li key={path}>
                <Link className={pathname.startsWith(path) ? 'active' : ''} href={path}>
                  {label}
                </Link>
              </li>
            ))}
          </ul>
        </div>
        <div className="flex-none space-x-2">
          <Suspense fallback={<div className="btn btn-ghost">Loading...</div>}>
            <WalletComponents component="WalletButton" />
          </Suspense>
          <ClusterUiSelect />
        </div>
      </div>
      <ClusterChecker>
        <Suspense fallback={null}>
          <WalletComponents component="AccountChecker" />
        </Suspense>
      </ClusterChecker>
      <div className="flex-grow mx-4 lg:mx-auto">
        <Suspense
          fallback={
            <div className="text-center my-32">
              <span className="loading loading-spinner loading-lg"></span>
            </div>
          }
        >
          {children}
        </Suspense>
        <Toaster position="bottom-right" />
      </div>
      <footer className="footer footer-center p-4 bg-base-300 text-base-content">
        <aside>
          <p>
            Generated by{' '}
            <a
              className="link hover:text-white"
              href="https://github.com/solana-developers/create-solana-dapp"
              target="_blank"
              rel="noopener noreferrer"
            >
              create-solana-dapp
            </a>
          </p>
        </aside>
      </footer>
    </div>
  )
}

export function AppModal({
  children,
  title,
  hide,
  show,
  submit,
  submitDisabled,
  submitLabel,
}: {
  children: ReactNode
  title: string
  hide: () => void
  show: boolean
  submit?: () => void
  submitDisabled?: boolean
  submitLabel?: string
}) {
  const dialogRef = useRef<HTMLDialogElement | null>(null)

  React.useEffect(() => {
    if (!dialogRef.current) return
    if (show) {
      dialogRef.current.showModal()
    } else {
      dialogRef.current.close()
    }
  }, [show, dialogRef])

  return (
    <dialog className="modal" ref={dialogRef}>
      <div className="modal-box space-y-5">
        <h3 className="font-bold text-lg">{title}</h3>
        {children}
        <div className="modal-action">
          <div className="join space-x-2">
            {submit ? (
              <button className="btn btn-xs lg:btn-md btn-primary" onClick={submit} disabled={submitDisabled}>
                {submitLabel || 'Save'}
              </button>
            ) : null}
            <button onClick={hide} className="btn">
              Close
            </button>
          </div>
        </div>
      </div>
    </dialog>
  )
}

export function AppHero({
  children,
  title,
  subtitle,
}: {
  children?: ReactNode
  title: ReactNode
  subtitle: ReactNode
}) {
  return (
    <div className="hero py-[64px]">
      <div className="hero-content text-center">
        <div className="max-w-2xl">
          {typeof title === 'string' ? <h1 className="text-5xl font-bold">{title}</h1> : title}
          {typeof subtitle === 'string' ? <p className="py-6">{subtitle}</p> : subtitle}
          {children}
        </div>
      </div>
    </div>
  )
}

export function ellipsify(str = '', len = 4) {
  if (str.length > 30) {
    return str.substring(0, len) + '..' + str.substring(str.length - len, str.length)
  }
  return str
}

export function useTransactionToast() {
  return (signature: string, message?: string) => {
    toast.custom((t) => (
      <div className={`${t.visible ? 'animate-enter' : 'animate-leave'} bg-base-200 shadow-lg rounded-lg pointer-events-auto flex`}>
        <div className="flex-1 p-4">
          <div className="flex items-center">
            <div className="flex-1">
              <p className="text-sm font-medium">
                {message ?? 'Transaction processed'}
              </p>
              <p className="text-xs text-base-content/70 truncate max-w-[200px] md:max-w-[300px]">
                {signature}
              </p>
            </div>
            <div className="ml-4 flex-shrink-0 flex">
              <button
                onClick={() => {
                  window.open(`https://explorer.solana.com/tx/${signature}`, '_blank')
                }}
                className="btn btn-xs btn-outline"
              >
                View
              </button>
              <button
                onClick={() => toast.dismiss(t.id)}
                className="ml-2 btn btn-xs btn-ghost"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      </div>
    ))
  }
}
